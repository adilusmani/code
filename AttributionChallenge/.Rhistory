ggplot(shotDataf,aes(x=1:nrow(shotDataf),y = SHOT_DISTANCE,col=factor(EVENT_TYPE)))+geom_point()
ggplot(temp,aes(x=1:nrow(shotDataf),y = SHOT_DISTANCE,col=factor(EVENT_TYPE)))+geom_point()
shotDataf= temp
shotDataf$EVENT_TYPE = as.numeric(shotDataf$EVENT_TYPE)
shotDataf$EVENT_TYPE = shotDataf$EVENT_TYPE-1
model1 = glm(EVENT_TYPE~SHOT_DISTANCE,data=shotDataf,family='binomial')
modelframe = augment(model1)
modelframe = data.frame(SHOT_DISTANCE = seq(0,71,1),.fitted = as.vector(predict(model1,type='response',newdata = data.frame(SHOT_DISTANCE=seq(0,71,1)))))
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line()
temp$SHOT_MADE_FLAG
model1 = glm(EVENT_TYPE~SHOT_MADE_FLAG,data=shotDataf,family='binomial')
model1 = glm(EVENT_TYPE~as.numeric(SHOT_MADE_FLAG),data=shotDataf,family='binomial')
model1 = glm(SHOT_MADE_FLAG~as.numeric(SHOT_DISTANCE),data=shotDataf,family='binomial')
modelframe = augment(model1)
modelframe = data.frame(SHOT_DISTANCE = seq(0,71,1),.fitted = as.vector(predict(model1,type='response',newdata = data.frame(SHOT_DISTANCE=seq(0,71,1)))))
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
median(temp$SHOT_DISTANCE)
modelframe = augment(model1)
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
model1 = glm(SHOT_MADE_FLAG~as.numeric(SHOT_DISTANCE),data=shotDataf,family='binomial')
modelframe = augment(model1)
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
modelframe
head(modelframe)
model1 = glm(SHOT_MADE_FLAG~SHOT_DISTANCE,data=shotDataf,family='binomial')
modelframe = augment(model1)
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
model
model1
ggplot(shotDataf,aes(x = LOC_X,y = LOC_Y,col=EVENT_TYPE)) + geom_point() + coord_fixed()
help(glm)
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
mean(temp$SHOT_DISTANCE)
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="glm")
ggplot(modelframe,aes(x = .fitted,y = .resid)) + geom_point() + geom_smooth(method="glm")
ggplot(modelframe,aes(x = .fitted,y = .resid)) + geom_point() + geom_smooth(method="loess")
ggplot(modelframe,aes(x = STOP_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess")
SHOT_DISTANCE
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess")
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess"method.args = list(degree = 1))
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
plot(density(temp$SHOT_DISTANCE))
plot(density(log10(temp$SHOT_DISTANCE)))
plot(density(log2(temp$SHOT_DISTANCE)))
plot(density((temp$SHOT_DISTANCE)**2))
plot(density(sqrt(temp$SHOT_DISTANCE)))
model1 = glm(SHOT_MADE_FLAG~log10(SHOT_DISTANCE),data=shotDataf,family='binomial')
model1 = glm(SHOT_MADE_FLAG~ log10(SHOT_DISTANCE),data=shotDataf,family='binomial')
model1 = glm(SHOT_MADE_FLAG~ log2(SHOT_DISTANCE),data=shotDataf,family='binomial')
model1 = glm(SHOT_MADE_FLAG~SHOT_DISTANCE,data=shotDataf,family='binomial')
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
str(dataF)
str(shotDataf)
cor(shotDataf$PERIOD,shotDataf$SHOT_MADE_FLAG)
newData = data.frame(PERIOD = as.numeric(shotDataf$PERIOD),MINUTES_REMAINING = as.numeric(shotDataf$MINUTES_REMAINING),SECONDS_REMAINING = as.numeric(shotDataf$SECONDS_REMAINING))
ggpairs(newData)
newData = data.frame(PERIOD = as.numeric(shotDataf$PERIOD),MINUTES_REMAINING = as.numeric(shotDataf$MINUTES_REMAINING),SECONDS_REMAINING = as.numeric(shotDataf$SECONDS_REMAINING),SHOT_MDAE_FLAG = as.numeric(shotDataf$SHOT_MADE_FLAG))
ggpairs(newData)
newData = data.frame(PERIOD = as.numeric(shotDataf$PERIOD),MINUTES_REMAINING = as.numeric(shotDataf$MINUTES_REMAINING),SECONDS_REMAINING = as.numeric(shotDataf$SECONDS_REMAINING),SHOT_MDAE_FLAG = as.numeric(shotDataf$SHOT_MADE_FLAG),SHOT_DISTANCE = as.numeric(shotDataf$SHOT_DISTANCE))
ggpairs(newData)
ggplot(newData,aes(x=PERIOD,y=SHOT_DISTANCE)) + geom_point()
ggplot(newData,aes(sample=SHOT_DISTANCE)) + geom_hist()
ggplot(newData,aes(sample=SHOT_DISTANCE)) + geom_histogram()
ggplot(newData,aes(x=SHOT_DISTANCE,col=PERIOD)) + geom_histogram()
ggplot(newData,aes(x=SHOT_DISTANCE,col=PERIOD,group = PERIOD)) + geom_histogram()
ggplot(newData,aes(x=SHOT_DISTANCE,col=factor(PERIOD),group = factor(PERIOD))) + geom_histogram()
ggplot(newData,aes(x=SHOT_DISTANCE)) + geom_histogram() + facet_wrap(~PERIOD)
ggplot(newData,aes(x=SHOT_DISTANCE)) + geom_histogram() + facet_wrap(~cut_number(MINUTES_REMAINING,3))
ggplot(newData,aes(x=SHOT_DISTANCE)) + geom_histogram() + facet_wrap(~cut_number(MINUTES_REMAINING,5))
ggplot(newData,aes(x=SHOT_DISTANCE)) + geom_histogram() + facet_wrap(~cut_number(SECONDS_REMAINING,5))
ggplot(shotDataf,aes(x=SHOT_DISTANCE)) + geom_histogram() + facet_wrap(~SHOT_ZONE_RANGE)
ggpairs(newData)
newData$SHOT_MDAE_FLAG
help(glm)
newModel = glm(SHOT_DISTANCE~log10(SHOT_MADE_FLAG)*SECONDS_REMAINING,data = shotDataf)
newModel = glm(SHOT_MADE_FLAG~log10(SHOT_MADE_DISTANCE)*SECONDS_REMAINING,data = shotDataf)
newModel = glm(SHOT_MADE_FLAG~log10(SHOT_DISTANCE)*SECONDS_REMAINING,data = shotDataf)
newModel = glm(SHOT_MADE_FLAG~log10(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data = shotDataf)
newModel = glm(SHOT_MADE_FLAG~log10(as.numeric(SHOT_DISTANCE))*as.numeric(SECONDS_REMAINING),data = shotDataf)
newModel = glm(SHOT_MADE_FLAG~log10(as.numeric(SHOT_DISTANCE))*as.numeric(SECONDS_REMAINING),data = shotDataf,family = 'binomial')
newModel = glm(SHOT_MADE_FLAG~log10(as.numeric(SHOT_DISTANCE))+as.numeric(SECONDS_REMAINING),data = shotDataf,family = 'binomial')
sum(is.na(shotDataf))
newModel = glm(SHOT_MADE_FLAG~+as.numeric(SECONDS_REMAINING),data = shotDataf,family = 'binomial')
newModel = glm(SHOT_MADE_FLAG~as.numeric(SECONDS_REMAINING),data = shotDataf,family = 'binomial')
newModel = glm(SHOT_MADE_FLAG~log10(as.numeric(SHOT_DISTANCE)),data = shotDataf,family = 'binomial')
newModel = glm(SHOT_MADE_FLAG~SHOT_DISTANCE,data=shotDataf,family='binomial')
newModel = glm(SHOT_MADE_FLAG~SHOT_DISTANCE+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModel = glm(SHOT_MADE_FLAG~SHOT_DISTANCE*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newModel = glm(SHOT_MADE_FLAG~log10(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModel = glm(SHOT_MADE_FLAG~log2(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
log10(shotDataf$SHOT_DISTANCE)
quantile(shotDataf$SHOT_DISTANCE)
plot(density(shotDataf$SHOT_DISTANCE/10))
plot(density(shotDataf$SHOT_DISTANCE*82))
plot(density(shotDataf$SHOT_DISTANCE**2))
plot(density(sqrt(shotDataf$SHOT_DISTANCE)))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
ggplot(newModelF,aes(x=sqrt(SHOT_DISTANCE),y=.redid)) + geom_histogram() + facet_wrap(~SHOT_ZONE_RANGE)
ggplot(newModelF,aes(x=sqrt(SHOT_DISTANCE),y=.redid)) + geom_line()
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.redid)) + geom_line()
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_line()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point()
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point() + geom_smooth()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point() + geom_smooth()
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point() + geom_smooth()
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=sqrt.SHOT_DISTANCE.,y=.resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING,y=.resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted,col=sqtr.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
plot(sqrt(shotDataf$SHOT_DISTANCE),shotDataf$SECONDS_REMAINING)
newDataModel = expand.grid(sqrt.SHOT_DISTANCE. = seq(0,5,1),as.numeric.SECONDS_REMAINING. = seq(0,60,1))
predModel = predict(newModelF,newDataModel,type='response')
help("predict")
predModel = predict(newModelF,newdata=newDataModel,type='response')
predModel = predict(newModel,newdata=newDataModel,type='response')
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModel
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
ggplot(modelframe,aes(x = .fitted,y = .resid)) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = .fitted,col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
ggplot(modelframe,aes(x = SHOT_DISTANCE,y = predict(model1, shotDataf,type='response'),col=SHOT_DISTANCE)) + geom_line() + labs(x = 'Shot Distance',y = 'Probability to Make a Shot')
ggplot(modelframe,aes(x = fitted.values(model1),y = residuals(model1,type='response'))) + geom_point() + geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newDataModel = expand.grid(sqrt.SHOT_DISTANCE. = seq(0,5,1),as.numeric.SECONDS_REMAINING. = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
ggplot(model)
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=.fitted,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=preModel,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=predModel,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
predModel = predict(newModel,newdata=newDataModel,type='response')
newDataModel = expand.grid(sqrt.SHOT_DISTANCE. = seq(0,5,1),as.numeric.SECONDS_REMAINING. = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
newDataModel = expand.grid(SHOT_DISTANCE. = seq(0,5,1),SECONDS_REMAINING. = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING. = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=predModel,col=sqrt.SHOT_DISTANCE.)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=as.numeric.SECONDS_REMAINING.,y=predModel)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newDataModel,aes(x=SHOT_DISTANCE,y=predModel)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel)) + geom_point() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
ggplot(newModelF,aes(x=.fitted,y=.resid)) + geom_point() + geom_smooth()
shotDataf$EVENT_TYPE
shotDataf$SHOT_ZONE_BASIC
newData = data.frame(PERIOD = as.numeric(shotDataf$PERIOD),MINUTES_REMAINING = as.numeric(shotDataf$MINUTES_REMAINING),SECONDS_REMAINING = as.numeric(shotDataf$SECONDS_REMAINING),SHOT_MDAE_FLAG = as.numeric(shotDataf$SHOT_MADE_FLAG),SHOT_DISTANCE = as.numeric(shotDataf$SHOT_DISTANCE),SHOT_ZONE_BASIC=as.numeric(shotDataf$SHOT_ZONE_BASIC),SHOT_ZONE_RANGE = as.numeric(shotDataf$SHOT_ZONE_RANGE))
ggpairs(newData)
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+SHOT_ZONE_BASIC,data=shotDataf,family='binomial')
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+SHOT_ZONE_BASIC+SHOT_ZONE_RANGE,data=shotDataf,family='binomial')
newModelF = augment(newModel)
ggplot(newModelF,aes(x=fitted.values(newModel),y=residuals(newModel,type='response'))) + geom_point() + geom_smooth()
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame %>% gather(F_values,preResid:newResid)
library(tidyr)
newFrame %>% gather(F_values,preResid:newResid)
newFrame %>% gather(TEMP,X,preResid:newResid)
newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE) + geom_point() + geom_smooth()
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth()
```
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth()
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth()
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth()
method.args = list(degree = 1))
method.args = list(degree = 1))
method.args = list(degree = 1))
method.args = list(degree = 1))
method.args = list(degree = 1))
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)*as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+as.numeric(MINUTES_REMAINING),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1),MINUTES_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+as.numeric(SHOT_ZONE_BASIC),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+as.numeric(SHOT_ZONE_RANGE),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING)+as.numeric(SHOT_ZONE_RANGE)+as.numeric(SHOT_ZONE_RANGE),data=shotDataf,family='binomial')
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
fitted.values(newModel)
ggplot(newModelF,aes(x=fitted.values(newModel),y=residuals(newModel,type='response'))) + geom_point() + geom_smooth()
ggplot(newModelF,aes(x=fitted.values(newModel),y=residuals(newModel,type='response'))) + geom_point() + geom_smooth()
library(tidyr)
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
shotDataf$SHOT_ZONE_BASIC
newModelF = augment(newModel)
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = residuals(newModel,type='response'))) + geom_point()
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid) + geom_point()
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid) )+ geom_point()
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid) )+ geom_point()
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid) )+ geom_point() + geom_point()
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid) )+ geom_point() + geom_smooth()
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid))+ geom_point() + geom_smooth(method="loess")
ggplot(newFrame,aes(x = shotDataf$SECONDS_REMAINING,y = newResid))+ geom_point() + geom_smooth(method="loess")
ggplot(newFrame,aes(x=F_values,y=VALUES,group = TYPE,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~TYPE)
ggplot(newFrame,aes(x=F_values,y=VALUES,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~TYPE)
ggplot(newFrame,aes(x=F_values,y=VALUES,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
newModel = glm(SHOT_MADE_FLAG~sqrt(SHOT_DISTANCE)+as.numeric(SECONDS_REMAINING),data=shotDataf,family='binomial')
newModelF = augment(newModel)
newDataModel = expand.grid(SHOT_DISTANCE = seq(0,5,1),SECONDS_REMAINING = seq(0,60,1))
predModel = predict(newModel,newdata=newDataModel,type='response')
ggplot(newDataModel,aes(x=SECONDS_REMAINING,y=predModel,group=SHOT_DISTANCE,col=SHOT_DISTANCE)) + geom_line() +geom_smooth(method="loess",method.args = list(degree = 1))
newFrame = data.frame(F_values = fitted.values(model1),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~TYPE)
```
newFrame = data.frame(F_values = fitted.values(newModel),preResid = residuals(model1,type='response'),newResid = residuals(newModel,type='response'))
newFrame = newFrame %>% gather(TYPE,VALUES,preResid:newResid)
ggplot(newFrame,aes(x=F_values,y=VALUES,col=TYPE)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~TYPE)
f1 = data.frame(F_values= fitted.values(model1),Resid = residuals(model1,type='response'),n=1:nrow(shotDataf))
f2 = data.frame(F_values = fitted.values(newModel),Resid = residuals(newModel,type='response'),n=1:nrow(shotDataf))
f1 = data.frame(F_values= fitted.values(model1),Resid = residuals(model1,type='response'),n=1:nrow(shotDataf),type=rep("pre",nrow(shotDataf)))
f2 = data.frame(F_values = fitted.values(newModel),Resid = residuals(newModel,type='response'),n=1:nrow(shotDataf),type=rep("new",nrow(shotDataf)))
f3 = rbind(f1,f2)
ggplot(f3,aes(x=F_values,y=Resid,col=type)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~TYPE)
ggplot(f3,aes(x=F_values,y=Resid,col=type)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1))
ggplot(f3,aes(x=F_values,y=Resid,col=type)) + geom_point() + geom_smooth(method = "loess", method.args = list(degree = 1)) + facet_wrap(~type)
plot(density(rnorm(1000))
)
help(rnorm)
plot(density(rnorm(1000,0,0.1))
)
plot(density(rnorm(1000,0.5,0.1))
)
plot(density(rnorm(1000,0.5,0.2)))
plot(density(rnorm(1000,0.5,0.1)))
x = rnorm(1000)
x = (x-min(x))/(max(x)-min(x))
plot(x)
plot(density(x))
quantile(x)
plot(density(2*x))
setwd("~/Curriculum/Conversant")
markov = read.csv('markov.csv')
library(tidyr)
x = data.frame(markov(table(markov$Path,markov$Converted)))
markov = read.csv('markov.csv')
x = data.frame(markov(table(markov$Path,markov$Converted)))
x = data.frame(table(markov$Path,markov$Converted))
View(x)
View(spread(x,Var2,freq))
View(spread(x,Var2,Freq))
markov  = data.frame(table(markov$Converted,markov$Path)) %>% spread(Var2,Freq)
library(ChannelAttribution)
M = markov_model(markov,Var1,`0`)
markov  = data.frame(table(markov$Converted,markov$Path)) %>% spread(Var2,Freq)
markov  = data.frame(table(markov$Converted,markov$Path))
markov = read.csv('markov.csv')
markov  = data.frame(table(markov$Converted,markov$Path))
markov = markov %>% spread(Var2,Freq)
M = markov_model(markov,Var1,`0`)
markov = read.csv('markov.csv')
markov  = data.frame(table(markov$Converted,markov$Path))
markov = spread(markov,Var2,Freq)
M = markov_model(markov,Var1,`0`)
View(markov)
markov = read.csv('markov.csv')
markov  = data.frame(table(markov$Converted,markov$Path))
View(markov)
markov = spread(markov,Var1,Freq)
M = markov_model(markov,Var1,`0`)
M = markov_model(markov,Var2,`0`)
M = markov_model(markov,'Var2','0')
M
M = markov_model(markov,'Var2','1')
M
help("markov_model")
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
M
markov = read.csv('markov.csv')
markov  = subset(data.frame(table(markov$Converted,markov$Path)),channel_name!='')
markov  = subset(data.frame(table(markov$Converted,markov$Path)),Var2!=)
markov = read.csv('markov.csv')
markov  = subset(data.frame(table(markov$Converted,markov$Path)),Var2!='')
markov = spread(markov,Var1,Freq)
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
M
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
M
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
help("heuristic_models")
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H
H = merge(M,H)
H
M
colnames(M)
colnames(M)[:dim(M)[2]]
dim(M)
dim(M)[1]
dim(M)[2]
colnames(M) = c(channel_names,'Markov')
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H = merge(M,H)
H
M
colnames(M) = c(channel_names,'Markov')
colnames(M) = c(channel_name,'Markov')
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H = merge(M,H)
H
M
colnames(M) = c(channel_name,Markov)
colnames(M) = c('channel_name','Markov')
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H = merge(M,H)
H
H = gather(H,Markov:linear_touch)
H = gather(H,Markov,linear_touch)
H
H = H %>% gather(Value,Markov:linear_touch)
melt(H,'channel_name')
library(reshape2)
melt(H,'channel_name')
melt(H,id= 'channel_name')
H
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H = merge(M,H)
melt(H,id= 'channel_name')
H = melt(merge(M,H),id='channel_name')
ggplot(H,aes(x = channel_name,y = value,col=variable)) + geom_bar()
library(ggplot2)
ggplot(H,aes(x = channel_name,y = value,col=variable)) + geom_bar()
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar()
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity')
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge')
data = read.csv('Filtered_data.csv')
View(data)
model = glm(Converted~First_channel+Last_channel+NCA+NCAFI+NCD+NCE+NCS+NCSEM+NCSO+NCSOI+NTC+NTV,data=attrib,family=binomial)
attrib = read.csv('Filtered_data.csv')
model = glm(Converted~First_channel+Last_channel+NCA+NCAFI+NCD+NCE+NCS+NCSEM+NCSO+NCSOI+NTC+NTV,data=attrib,family=binomial)
model
table(attrib$Converted)
attrib = read.csv('Extracted_data.csv',header=TRUE,na = FALSE)
repeated = (attrib[attrib$Userid %in% subset(data.frame(table(attrib$Userid)),Freq!=1)$Var1,])
repeat_noVal = subset(repeated,First_channel==''& Converted==1)
firstconv = repeat_noVal %>%
select(Userid,event_timestamp,Last_date,First_date)%>%
inner_join(select(subset(repeated,Converted==0),Userid,event_timestamp,Last_date,First_date),by="Userid")
attrib = subset(attrib,!(attrib$Userid %in% repeated$Userid))
repeated = subset(repeated,(First_channel!='' & Converted==1))
attrib = rbind(attrib,repeated)
attrib = subset(attrib,device_types>0)
attrib$Converted = as.factor(attrib$Converted)
attrib$event_timestamp = as.POSIXct(attrib$event_timestamp)
attrib$First_date = as.POSIXct(attrib$First_date)
attrib$Last_date = as.POSIXct(attrib$Last_date)
write.csv(attrib,"Filtered_data.csv")
write.csv(attrib,"Filtered_data.csv",row.names = FALSE)
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion")
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion") + + guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable,alpha-0.5)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge',aes(alpha-0.5)) + labs(x = "Channel Name",y = "Total Conversion") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge',aes(alpha=0.5)) + labs(x = "Channel Name",y = "Total Conversion") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types")) + scale_y_continuous(label=percent)
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types")) + scale_y_continuous(labels=percent)
ggplot(H,aes(x = channel_name,y = ..count../sum(..count..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types")) + scale_y_continuous(labels=percent)
ggplot(H,aes(x = channel_name,y = ..count../sum(..count..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = (..count..)/sum(..count..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,fill=variable)) + geom_bar(stat='identity',position='dodge',aes(y = (..count..)/sum(..count..))) + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types")) + + scale_y_continuous(labels = scales::percent)
ggplot(H,aes(x = channel_name,y = (..value..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types")) + + scale_y_continuous(labels = scales::percent)
ggplot(H,aes(x = channel_name,y = (..value..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
merge(M,H)
H
H %>% group_by(channel_name) %>% summarize(n/nrow(H))
H %>% groupby(channel_name) %>% summarize(n/nrow(H))
librar(dplyr)
library(dplyr)
H %>% group_by(channel_name) %>% summarize(n/nrow(H))
H %>% group_by(channel_name)
H %>% group_by(channel_name) %>% mutate(perc = n/nrow(H))
ggplot(H,aes(x = channel_name,y = (..value..),fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
H
merge(H,M)
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
colnames(M) = c('channel_name','Markov')
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
merge(H,M)
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
colnames(M) = c('channel_name','Markov')
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H = melt(merge(M,H),id='channel_name')
H
group_by(channel_name,variable) %>% summarize(n = n()) %>% mutate(freq = n/sum(n))
group_by(H<channel_name,variable) %>% summarize(n = n()) %>% mutate(freq = n/sum(n))
group_by(H,channel_name,variable) %>% summarize(n = n()) %>% mutate(freq = n/sum(n))
H
group_by(H,channel_name,variable) %>% summarize(n = value %>% mutate(freq = n/sum(n))
)
group_by(H,channel_name,variable) %>% summarize(n = value) %>% mutate(freq = n/sum(n))
H = group_by(H,channel_name,variable) %>% summarize(n = value) %>% mutate(freq = n/sum(n))
ggplot(H,aes(x = channel_name,y = freq,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
M = markov_model(markov,var_path = 'Var2',var_conv = '1',var_null = '0')
colnames(M) = c('channel_name','Markov')
M$Markov = (M$Markov/sum(M$Markov))*100
H$
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
markov = read.csv('markov.csv')
markov  = subset(data.frame(table(markov$Converted,markov$Path)),Var2!='')
markov = spread(markov,Var1,Freq)
H = heuristic_models(markov,var_path = 'Var2',var_conv = '1')
H$first_touch = (H$first_touch/sum(H$first_touch))*100
H$last_touch = (H$last_touch/sum(H$last_touch))*100
H$linear_touch = (H$linear_touch/sum(H$linear_touch))*100
H = melt(merge(M,H),id='channel_name')
ggplot(H,aes(x = channel_name,y = freq,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Total Conversion in %", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Conversion effect in %", title = "") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Conversion effect in %", title = "Channel Attribution by different methods  ") +  guides(fill=guide_legend(title="Types"))
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Conversion effect in %", title = "Channel Attribution by different methods  ") +  guides(fill=guide_legend(title="Methods"))
repeated = (attrib[attrib$Userid %in% subset(data.frame(table(attrib$Userid)),Freq!=1)$Var1,])
repeat_noVal = subset(repeated,First_channel==''& Converted==1)
repeat_noVal
attrib = read.csv('Extracted_data.csv',header=TRUE,na = FALSE)
per = table(attrib$Converted)
per = per/sum(per) * 100
ggplot(attrib,aes(x=log10(event_timestamp))) + geom_density() + facet_wrap(~Converted)
repeated = (attrib[attrib$Userid %in% subset(data.frame(table(attrib$Userid)),Freq!=1)$Var1,])
repeat_noVal = subset(repeated,First_channel==''& Converted==1)
repeat_noVal
dim(repeat_noVal)
dim(repeated)
ggplot(H,aes(x = channel_name,y = value,fill=variable)) + geom_bar(stat='identity',position='dodge') + labs(x = "Channel Name",y = "Conversion effect in %", title = "Channel Attribution by different methods  ") +  guides(fill=guide_legend(title="Methods"))
attrib = read.csv('Extracted_data.csv',header=TRUE,na = FALSE)
table(attrib$Converted)
